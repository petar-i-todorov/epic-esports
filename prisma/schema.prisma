// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PasswordHash {
  id        String   @id @default(cuid())
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User?
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String
  username     String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  passwordId   String         @unique
  reactions    PostReaction[]
  passwordHash PasswordHash   @relation(fields: [passwordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  connection   Connection[]

  @@index([passwordId])
}

model PostImage {
  id          String   @id @default(cuid())
  blob        Bytes
  altText     String?
  contentType String
  credit      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postId      String

  @@index([postId])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  quote     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String         @id @default(cuid())
  slug      String         @unique
  reactions PostReaction[]
}

model PostReaction {
  id        String           @id @default(cuid())
  typeId    String
  type      PostReactionType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  post      Post             @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model PostReactionType {
  id        String         @id @default(cuid())
  name      String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  reactions PostReaction[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  target    String
  secret    String
  digits    Int
  period    Int
  algorithm String
  charSet   String

  @@unique([type, target])
}

model Connection {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  providerId String
  provider   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([providerId, provider])
  @@index([userId])
}
