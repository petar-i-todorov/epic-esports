// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PasswordHash {
  id        String   @id @default(cuid())
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId     String   @unique
  owner User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index ([userId])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  username  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordHash PasswordHash?
  posts     Post[]
  reactions PostReaction[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  subtitle  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authors   User[]
  categoryId String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  images PostImage[]
  reactions PostReaction[]
  @@index ([categoryId])
}

model PostImage {
  id        String   @id @default(cuid())
  blob      Bytes
  altText   String?
  contentType String
  credit    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index ([postId])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  urlName   String   @unique
  quote     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model PostReaction {
  id        String   @id @default(cuid())
  typeId    String
  type PostReactionType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index ([userId])
  @@index ([postId])
}

model PostReactionType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reactions PostReaction[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  target    String
  secret    String
  digits    Int
  period    Int
  algorithm String
  charSet   String
  expiresAt DateTime
  @@unique ([type, target])
}